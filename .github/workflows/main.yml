name: CI/CD

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

env:
  PORT: 3000
  JWT_SECRET: ${{secrets.JWT_SECRET}}
  SENDGRID_API_KEY: ${{secrets.SENDGRID_API_KEY}}
  E2E_TEST_AUTH0_ADMIN_EMAIL: ${{secrets.E2E_TEST_AUTH0_ADMIN_EMAIL}}
  E2E_TEST_AUTH0_ADMIN_PASSWORD: ${{secrets.E2E_TEST_AUTH0_ADMIN_PASSWORD}}
  E2E_TEST_AUTH0_ADMIN_ID: ${{secrets.E2E_TEST_AUTH0_ADMIN_ID}}
  E2E_TEST_ADMIN_USERNAME: ${{secrets.E2E_TEST_ADMIN_USERNAME}}
  E2E_TEST_ADMIN_FIRST_NAME: ${{secrets.E2E_TEST_ADMIN_FIRST_NAME}}
  E2E_TEST_ADMIN_LAST_NAME: ${{secrets.E2E_TEST_ADMIN_LAST_NAME}}
  E2E_TEST_ADMIN_IS_ADMIN: ${{secrets.E2E_TEST_ADMIN_IS_ADMIN}}
  E2E_TEST_ADMIN_GARDEN_ID: ${{secrets.E2E_TEST_ADMIN_GARDEN_ID}}
  E2E_TEST_AUTH0_MEMBER_EMAIL: ${{secrets.E2E_TEST_AUTH0_MEMBER_EMAIL}}
  E2E_TEST_AUTH0_MEMBER_PASSWORD: ${{secrets.E2E_TEST_AUTH0_MEMBER_PASSWORD}}
  E2E_TEST_AUTH0_MEMBER_ID: ${{secrets.E2E_TEST_AUTH0_MEMBER_ID}}
  E2E_TEST_MEMBER_USERNAME: ${{secrets.E2E_TEST_MEMBER_USERNAME}}
  E2E_TEST_MEMBER_FIRST_NAME: ${{secrets.E2E_TEST_MEMBER_FIRST_NAME}}
  E2E_TEST_MEMBER_LAST_NAME: ${{secrets.E2E_TEST_MEMBER_LAST_NAME}}
  E2E_TEST_MEMBER_IS_ADMIN: ${{secrets.E2E_TEST_MEMBER_IS_ADMIN}}
  E2E_TEST_MEMBER_GARDEN_ID: ${{secrets.E2E_TEST_MEMBER_GARDEN_ID}}
  TEST_HEADLESS: ${{secrets.TEST_HEADLESS}}
  # Use the below line to debug nock
  # DEBUG: nock.*

  # For Auth0 - this will be used for testing
  AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
  AUTH0_API_EXPLORER_CLIENTID: ${{ secrets.AUTH0_API_EXPLORER_CLIENTID }}
  AUTH0_API_EXPLORER_SECRET: ${{ secrets.AUTH0_API_EXPLORER_SECRET }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/playwright-github-action@v1
      - name: Cache packages
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci

      - name: Linting
        run: "npm run lint -- --rule 'no-console: 2'"

      - name: Test
        run: npm run test

      ### the below is for E2E testing ###
      # - name: Build
      #   run: npm run build

      # - name: Seed data
      #   run: npm run db:seed

      # - name: Start test server
      #   run: npm run start & npx wait-on http://localhost:${{ env.PORT }}

      # - name: Skipping E2E Tests!
      #   run: npm run test:e2e

  ### the below is for deployment to Heroku ###
#   deploy-dev:
#     runs-on: ubuntu-latest
#     # this prevents deployment for pull requests and works only for push in dev
#     if: ${{ github.ref == 'refs/heads/dev' }} # this should be dev
#     needs: build
<<<<<<< HEAD:.github/workflows/main.yml
#     # Each environment can have different evn vars which includes different Auth0 secrets 
=======
#     # Each environment can have different evn vars which includes different Auth0 secrets
>>>>>>> dependency-updates:.github/workflows/ci.yml
#     # Those secrets can be different than the repository secrets
#     environment: development
#     steps:
#     - uses: actions/checkout@v2
<<<<<<< HEAD:.github/workflows/main.yml
     
=======

>>>>>>> dependency-updates:.github/workflows/ci.yml
#     - uses: akhileshns/heroku-deploy@master
#       with:
#         heroku_api_key: ${{secrets.HEROKU_API_KEY}}
#         heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
#         heroku_email: ${{secrets.HEROKU_EMAIL}}
#         # branch: 'dev' # this should be dev
#       env:
#         HD_JWT_SECRET: ${{secrets.JWT_SECRET}}
#         HD_SENDGRID_API_KEY: ${{secrets.SENDGRID}}
#         HD_AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
#         HD_AUTH0_API_EXPLORER_CLIENTID: ${{ secrets.AUTH0_API_EXPLORER_CLIENTID }}
#         HD_AUTH0_API_EXPLORER_SECRET: ${{ secrets.AUTH0_API_EXPLORER_SECRET }}
<<<<<<< HEAD:.github/workflows/main.yml
        
  # deploy-prod:
  #   runs-on: ubuntu-latest
  #   # this prevents deployment for pull requests and works for push in main
  #   if: ${{ github.ref == 'refs/heads/main' }}
  #   needs: build
  #   environment: production
  #   steps:
  #   - uses: actions/checkout@v2
     
  #   - uses: akhileshns/heroku-deploy@master
  #     with:
  #       heroku_api_key: ${{secrets.HEROKU_API_KEY}}
  #       heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
  #       heroku_email: ${{secrets.HEROKU_EMAIL}}
  #     env:
  #       HD_JWT_SECRET: ${{secrets.JWT_SECRET}}
  #       HD_SENDGRID_API_KEY: ${{secrets.SENDGRID}}
  #       HD_AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
  #       HD_AUTH0_API_EXPLORER_CLIENTID: ${{ secrets.AUTH0_API_EXPLORER_CLIENTID }}
  #       HD_AUTH0_API_EXPLORER_SECRET: ${{ secrets.AUTH0_API_EXPLORER_SECRET }}
=======

# deploy-prod:
#   runs-on: ubuntu-latest
#   # this prevents deployment for pull requests and works for push in main
#   if: ${{ github.ref == 'refs/heads/main' }}
#   needs: build
#   environment: production
#   steps:
#   - uses: actions/checkout@v2

#   - uses: akhileshns/heroku-deploy@master
#     with:
#       heroku_api_key: ${{secrets.HEROKU_API_KEY}}
#       heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
#       heroku_email: ${{secrets.HEROKU_EMAIL}}
#     env:
#       HD_JWT_SECRET: ${{secrets.JWT_SECRET}}
#       HD_SENDGRID_API_KEY: ${{secrets.SENDGRID}}
#       HD_AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
#       HD_AUTH0_API_EXPLORER_CLIENTID: ${{ secrets.AUTH0_API_EXPLORER_CLIENTID }}
#       HD_AUTH0_API_EXPLORER_SECRET: ${{ secrets.AUTH0_API_EXPLORER_SECRET }}
>>>>>>> dependency-updates:.github/workflows/ci.yml
